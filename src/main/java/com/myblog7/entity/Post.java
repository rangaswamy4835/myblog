package com.myblog7.entity;

import lombok.*;


import javax.persistence.*; //All imports are happen here
import java.util.List;


//Press alt+enter in intellij

    //Here setters and getters are not used bcz that unnessarily that make our code length,,imagine if there are 3 fields i recquire 6 methods 3 setters and 3 getters
           //by adding lombok annotation @Data we will automatically get the getters and setters in the project
   @NoArgsConstructor
   @AllArgsConstructor
   @Entity
   @Table(
           name="posts",
           uniqueConstraints = {@UniqueConstraint(columnNames = {"title"})} // this is the another way of applying the unique constraints
                                                                            //this will make the column name unique

   )

   public class Post {
   @Id  // This id will autogenerated
    @GeneratedValue(strategy= GenerationType.IDENTITY)
    private Long id;

    @Column(name="title", nullable = false)
    private String title;

    @Column(name="description", nullable = false)
    private String description;

        public List<Comment> getComments() {
            return comments;
        }

        public void setComments(List<Comment> comments) {
            this.comments = comments;
        }

        @Column(name="content", nullable = false)
    private String content ;

    @OneToMany(mappedBy = "post", cascade = CascadeType.ALL)
    private List<Comment> comments;

       public Long getId() {
           return id;
       }

       public void setTitle(String title) {
           this.title = title;
       }

       public void setId(Long id) {
           this.id = id;
       }

       public void setDescription(String description) {
           this.description = description;
       }

       public void setContent(String content) {
           this.content = content;
       }

       public String getTitle() {
           return title;
       }

       public String getDescription() {
           return description;
       }

       public String getContent() {
           return content;
       }
   }
